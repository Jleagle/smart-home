version: '3'
services:

  radarr:
    image: linuxserver/radarr:latest
    hostname: radarr
    container_name: radarr
    restart: "unless-stopped"
    ports:
      - "7878:7878"
    volumes:
      - ${DOCKER_DATA}/Radarr/Config:/config
      - ${DOCKER_DATA}/NZBGet/Downloads:/downloads
      - ${MEDIA_DATA}/Video:/movies
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London

  sonarr:
    image: linuxserver/sonarr:latest
    hostname: sonarr
    container_name: sonarr
    restart: "unless-stopped"
    ports:
      - "8989:8989"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ${DOCKER_DATA}/Sonarr/Config:/config
      - ${DOCKER_DATA}/NZBGet/Downloads:/downloads
      - ${MEDIA_DATA}/Television:/tv
      - /etc/localtime:/etc/localtime:ro

  hydra:
    image: linuxserver/hydra:latest
    hostname: hydra
    container_name: hydra
    restart: "unless-stopped"
    ports:
      - "5075:5075"
    volumes:
      - ${DOCKER_DATA}/NZBHydra/Config:/config
      - ${DOCKER_DATA}/NZBHydra/Downloads:/downloads
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London

  nzbget:
    image: linuxserver/nzbget:latest
    hostname: nzbget
    container_name: nzbget
    restart: "unless-stopped"
    ports:
      - "6789:6789"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ${DOCKER_DATA}/NZBGet/Config:/config
      - ${DOCKER_DATA}/NZBGet/Downloads:/downloads

  plex:
    image: linuxserver/plex:latest
    hostname: plex
    container_name: plex
    network_mode: "host"
    restart: "unless-stopped"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
      - VERSION=latest
    volumes:
      - ${DOCKER_DATA}/Plex/Transcoding:/transcode
      - ${MEDIA_DATA}/Docker/Plex/Config:/config
      - ${MEDIA_DATA}/Television:/data/tvshows
      - ${MEDIA_DATA}/Video:/data/movies
      - ${MEDIA_DATA}/YouTube:/data/youtube

  ouroboros:
    image: pyouroboros/ouroboros:latest
    hostname: ouroboros
    container_name: ouroboros
    restart: "unless-stopped"
    environment:
      - CLEANUP=true
      - SELF_UPDATE=true
      - MONITOR="radarr sonarr hydra nzbget plex portainer hass nodered mosquitto ddns phlex"
      - CRON="2 12 * * *"
      - LOG_LEVEL=info
      - NOTIFIERS=${OUROBOROS_SLACK_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  ddns:
    container_name: ddns
    hostname: ddns
    image: jimeagle/digital-ocean-ddns:latest
    restart: "unless-stopped"
    environment:
      - KEY=${DO_DDNS_KEY}
      - ONE_TIME=false
      - ON_LOAD=true
    volumes:
      - ./ddns/records.yaml:/root/records.yaml:ro

  #  tubesync:
  #    image: ghcr.io/meeb/tubesync:v0.9.1
  #    hostname: tubesync
  #    container_name: tubesync
  #    network_mode: "host" # To match Plex
  #    environment:
  #      - PUID=1000
  #      - PGID=1000
  #      - TZ=Europe/London
  #      - HTTP_USER=$TUBE_SYNC_USER
  #      - HTTP_PASS=$TUBE_SYNC_PASS
  #    volumes:
  #      - ${DOCKER_DATA}/TubeSync/Config:/config
  #      - ${MEDIA_DATA}/YouTube:/downloads
  #    ports:
  #      - 4848:4848
  #    restart: unless-stopped

  #  portainer:
  #    image: portainer/portainer:latest
  #    hostname: portainer
  #    container_name: portainer
  #    restart: "unless-stopped"
  #    ports:
  #      - "9000:9000"
  #    volumes:
  #      - ${DOCKER_DATA}/Portainer/Data:/data
  #      - /var/run/docker.sock:/var/run/docker.sock

  hass:
    image: homeassistant/home-assistant:latest
    hostname: hass
    container_name: hass
    restart: "unless-stopped"
    network_mode: host
    privileged: true
    volumes:
      - ${DOCKER_DATA}/HomeAssistant/Config:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=Europe/London

  nodered:
    image: nodered/node-red:latest
    hostname: nodered
    container_name: nodered
    restart: "unless-stopped"
    environment:
      - TZ=Europe/London
    ports:
      - "1880:1880"
    volumes:
      - ${DOCKER_DATA}/NodeRed/Config:/data

  #  mosquitto:
  #    image: eclipse-mosquitto:latest
  #    hostname: mosquitto
  #    container_name: mosquitto
  #    ports:
  #      - "1883:1883"
  #      - "9001:9001"
  #    volumes:
  #      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
  #      - ${DOCKER_DATA}/Mosquitto/Log/mosquitto.log:/mosquitto/log/mosquitto.log
  #      - ${DOCKER_DATA}/Mosquitto/Data:/mosquitto/data

  #  phlex:
  #    image: digitalhigh/phlex:latest
  #    hostname: phlex
  #    container_name: phlex
  #    restart: "unless-stopped"
  #    volumes:
  #      - ${DOCKER_DATA}/Phlex/Config:/config
  #    environment:
  #      - PGID=1000
  #      - PUID=1000
  #      - TZ=Europe/London
  #    ports:
  #      - "5666:80"
  #      - "5667:443"

  #  bazarr:
  #    image: linuxserver/bazarr:latest
  #    hostname: bazarr
  #    container_name: bazarr
  #    environment:
  #      - PUID=1000
  #      - PGID=1000
  #      - TZ=Europe/London
  #      - UMASK_SET=022 #optional
  #    volumes:
  #      - ${DOCKER_DATA}/Bazarr/Config:/config
  #      - ${MEDIA_DATA}/Video:/movies
  #      - ${MEDIA_DATA}/Television:/tv
  #    ports:
  #      - 6767:6767
  #    restart: unless-stopped

  #  pihole:
  #    image: pihole/pihole:latest
  #    dns:
  #      - 127.0.0.1
  #      - 1.1.1.1
  #    ports:
  #      - "53:53/tcp"
  #      - "53:53/udp"
  #      - "80:80/tcp"
  #      - "443:443/tcp"
  #    # The 3 lines below are required if Pi-hole is to provide DHCP
  #    # cap_add:
  #    #  - NET_ADMIN
  #    # network_mode: "host"
  #    environment:
  #      # enter your docker host IP here
  #      ServerIP:
  #      # IPv6 Address if your network supports it
  #      #ServerIPv6: 192.168.1.55
  #      # jwilder/proxy envs, see readme for more info
  #      PROXY_LOCATION: pihole
  #      VIRTUAL_HOST: pihole.yourdomain.local
  #      VIRTUAL_PORT: 80
  #    # Add your own custom hostnames you need for your domain
  #    extra_hosts:
  #      #   Point any of the jwilder virtual_host addresses
  #      # to your docker host ip address
  #      - 'pihole.yourdomain.local:192.168.1.55'
  #    volumes:
  #    # - '/etc/pihole/:/etc/pihole/'
  #    # WARNING: if this log don't exist as a file on the host already
  #    # docker will try to create a directory in it's place making for lots of errors
  #    # - '/var/log/pihole.log:/var/log/pihole.log'
  #    restart: always

  #  netdata:
  #    image: netdata/netdata:latest
  #    hostname: netdata
  #    container_name: netdata
  #    restart: "unless-stopped"
  #    ports:
  #    - 19999:19999
  #    cap_add:
  #    - SYS_PTRACE
  #    security_opt:
  #    - apparmor:unconfined
  #    volumes:
  #    - /proc:/host/proc:ro
  #    - /sys:/host/sys:ro
  #    - /var/run/docker.sock:/var/run/docker.sock:ro

  #  ombi:
  #    image: linuxserver/ombi:latest
  #    hostname: ombi
  #    container_name: ombi
  #    restart: "unless-stopped"
  #    ports:
  #    - "3579:3579"
  #    volumes:
  #    - ${DOCKER_DATA}/Ombi/Config:/config
  #    environment:
  #    - PGID=1000
  #    - TZ=Europe/London

  #  overseerr:
  #    image: sctx/overseerr:latest
  #    hostname: overseerr
  #    container_name: overseerr
  #    restart: "unless-stopped"
  #    ports:
  #      - "5055:5055"
  #    volumes:
  #      - ${DOCKER_DATA}/Overseerr/Config:/app/config
  #    environment:
  #      - TZ=Europe/London

  #  nfs:
  #    image: itsthenetwork/nfs-server-alpine:latest
  #    hostname: nfs
  #    container_name: nfs
  #    restart: "unless-stopped"
  #    ports:
  #    - "2049:2049"
  #    volumes:
  #    - /data1/:/nfsshare
  #    environment:
  #    - SHARED_DIRECTORY=${MEDIA_DATA}
  #    - READ_ONLY=true

  #  jackett:
  #    image: linuxserver/jackett:latest
  #    container_name: jackett
  #    restart: unless-stopped
  #    ports:
  #      - ${JACKETT_EXTPORT}:${JACKETT_INTPORT}
  #    volumes:
  #      - ${DOCKERDIR}/jackett:/config
  #      - ${DOCKERDIR}/Downloads:/downloads
  #    environment:
  #      PUID: $PUID
  #      PGID: $PGID
  #      TZ: $TZ
  #    security_opt:
  #      - no-new-privileges:true
