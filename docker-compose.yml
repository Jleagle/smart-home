include:
  - "docker-compose.doubletake.yml"
  - "docker-compose.share.yml"

services:

  2fauth:
    image: "2fauth/2fauth:latest"
    container_name: "2fauth"
    volumes:
      - "${HOME}/2FAuth:/2fauth"
    ports:
      - "8000:8000/tcp"
    environment:
      - "SITE_OWNER=jimeagle@gmail.com"
      - "APP_KEY=${TWOFAUTH_KEY}"
      - "APP_URL=2fauth.jimeagle.com"

  adguard:
    image: "adguard/adguardhome:latest"
    container_name: "adguard"
    hostname: "adguard"
    restart: "unless-stopped"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8089:80"
    environment:
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/AdGuard/Work:/opt/adguardhome/work"
      - "${HOME}/AdGuard/Conf:/opt/adguardhome/conf"

  autoheal:
    image: "willfarrell/autoheal:latest"
    container_name: "autoheal"
    hostname: "autoheal"
    restart: "unless-stopped"
    environment:
      - "AUTOHEAL_CONTAINER_LABEL=all"
      - "AUTOHEAL_INTERVAL=10"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  changedetection:
    image: "ghcr.io/dgtlmoon/changedetection.io:latest"
    container_name: "changedetection"
    hostname: "changedetection"
    restart: "unless-stopped"
    ports:
      - "5001:5000"
    volumes:
      - "${HOME}/ChangeDetection:/datastore"

  elastic:
    image: "elasticsearch:8.17.1"
    container_name: "elastic"
    hostname: "elastic"
    restart: "unless-stopped"
    user: "1000:1000"
    ports:
      - "9200:9200"
    environment:
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "cluster.name=gsc-cluster"
      - "discovery.seed_hosts=[]"
      - "discovery.type=single-node"
      - "node.name=gsc-node"
    volumes:
      - "${HOME}/Elastic:/usr/share/elasticsearch/data"

  kibana:
    image: "kibana:8.17.1"
    container_name: "kibana"
    hostname: "kibana"
    restart: "unless-stopped"
    user: "1000:1000"
    ports:
      - "5601:5601"
    depends_on:
      - "elastic"
    volumes:
      - "./kibana/kibana.yml:/usr/share/kibana/config/kibana.yml:ro"
      - "${HOME}/Kibana:/usr/share/kibana/data"

  #  esphome:
  #    image: "esphome/esphome:latest"
  #    container_name: "esphome"
  #    hostname: "esphome"
  #    restart: "unless-stopped"
  #    network_mode: "host"
  #    volumes:
  #      - "${HOME}/ESPHome:/config"
  #      - "/etc/localtime:/etc/localtime:ro"

  frigate:
    image: "ghcr.io/blakeblackshear/frigate:stable"
    container_name: "frigate"
    hostname: "frigate"
    restart: "unless-stopped"
    shm_size: "128mb" # update for your cameras based on calculation above
    devices:
      - "/dev/dri/renderD128"       # for intel hwaccel, needs to be updated for your hardware
      - "/dev/apex_0:/dev/apex_0"   # passes a PCIe Coral, follow driver instructions here https://coral.ai/docs/m2/get-started/#2a-on-linux
    volumes:
      - "${HOME}/Media/Frigate:/media/frigate"
      - "./frigate:/config"
      - "/etc/localtime:/etc/localtime:ro"
    tmpfs:
      - "/tmp/cache"
    ports:
      - "1935:1935" # RTMP feeds
      - "5000:5000" # API
    environment:
      - "FRIGATE_DRIVEWAY_USERNAME"
      - "FRIGATE_DRIVEWAY_PASSWORD"

  grafana:
    image: "grafana/grafana:latest"
    container_name: "grafana"
    hostname: "grafana"
    restart: "unless-stopped"
    user: "0"
    ports:
      - "3001:3000"
    environment:
      - "GRAFANA_SMTP_PASS"
    volumes:
      - "${HOME}/Grafana/Data:/var/lib/grafana"
      - "./grafana/grafana.ini:/etc/grafana/grafana.ini:ro"

  grafana-image-renderer:
    image: "grafana/grafana-image-renderer:latest"
    container_name: "grafana-image-renderer"
    hostname: "grafana-image-renderer"
    restart: "unless-stopped"

  hass:
    image: "homeassistant/home-assistant:latest"
    container_name: "hass"
    hostname: "hass"
    restart: "unless-stopped"
    network_mode: "host"
    privileged: true
    devices:
      - "/dev/gpiomem:/dev/gpiomem"
      - "/dev/ttyUSB0:/dev/ttyUSB0"
    volumes:
      - "${HOME}/Hass/Config:/config"
      - "${HOME}/Hass/google_assistant_key.json:/config/google_assistant_key.json:ro"
      - "./hass/config.yml:/config/configuration.yaml"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "TZ=Europe/London"

  influx:
    image: "influxdb:2.5"
    container_name: "influx"
    hostname: "influx"
    restart: "unless-stopped"
    ports:
      - "8086:8086"
    volumes:
      - "${HOME}/Influx:/home/influxdb/.influxdbv2/"
      - "./influx/config.yml:/etc/influxdb2/config.yml:ro"

  kuma:
    image: "louislam/uptime-kuma:latest"
    hostname: "kuma"
    container_name: "kuma"
    restart: "unless-stopped"
    ports:
      - "3002:3001"
    volumes:
      - "${HOME}/UptimeKuma:/app/data"

  mosquitto:
    image: "eclipse-mosquitto:latest"
    container_name: "mosquitto"
    hostname: "mosquitto"
    restart: "unless-stopped"
    ports:
      - "1883:1883"
    volumes:
      - "${HOME}/Mosquitto/Log/mosquitto.log:/mosquitto/log/mosquitto.log"
      - "${HOME}/Mosquitto/Data:/mosquitto/data"
      - "./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf"

  nodered:
    image: "nodered/node-red:latest"
    container_name: "nodered"
    hostname: "nodered"
    restart: "unless-stopped"
    user: "root"
    ports:
      - "1880:1880"
    environment:
      - "HTTP_USERNAME=${NODE_RED_HTTP_USERNAME}"
      - "HTTP_PASSWORD=${NODE_RED_HTTP_PASSWORD}"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/NodeRed:/data"
      - "./node-red/settings.js:/data/settings.js:ro"

  nzbget:
    image: "linuxserver/nzbget:latest"
    container_name: "nzbget"
    hostname: "nzbget"
    restart: "unless-stopped"
    ports:
      - "6789:6789"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/NZBGet/Config:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"

  overseerr:
    image: "linuxserver/overseerr:latest"
    container_name: "overseerr"
    hostname: "overseerr"
    restart: "unless-stopped"
    ports:
      - "5055:5055"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Overseerr:/config"
    dns:
      - "1.1.1.1" # Speeds things up for some reason
      - "8.8.8.8"

  plex:
    image: "linuxserver/plex:latest"
    container_name: "plex"
    hostname: "plex"
    restart: "unless-stopped"
    network_mode: "host"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
      - "VERSION=latest"
    volumes:
      #- "${HOME}/Plex/Transcoding:/transcode"
      - "/dev/shm:/transcode"
      - "${HOME}/Plex/Config:/config"
      - "${HOME}/Media/Television:/data/tvshows"
      - "${HOME}/Media/Movies:/data/movies"
      - "${HOME}/Media/YouTube:/data/youtube"
      - "${HOME}/Media/Frigate:/data/frigate"
    devices:
      - "/dev/dri:/dev/dri" # Quicksync

  postgres:
    image: "postgres:15"
    hostname: "postgres"
    container_name: "postgres"
    restart: "unless-stopped"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASS}"
    volumes:
      - "${HOME}/Postgres/Data:/var/lib/postgresql/data"

  prowlarr:
    image: "linuxserver/prowlarr:develop"
    container_name: "prowlarr"
    hostname: "prowlarr"
    restart: "unless-stopped"
    ports:
      - "9696:9696"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Prowlarr:/config"

  radarr:
    image: "linuxserver/radarr:latest"
    container_name: "radarr"
    hostname: "radarr"
    restart: "unless-stopped"
    ports:
      - "7878:7878"
    volumes:
      - "${HOME}/Radarr:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"
      - "${HOME}/Media/Movies:/movies"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"

  redis:
    image: "redis:7"
    container_name: "redis"
    hostname: "redis"
    restart: "unless-stopped"
    volumes:
      - "${HOME}/Redis/Data:/data"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

  scrutiny:
    image: "ghcr.io/analogj/scrutiny:master-omnibus"
    container_name: "scrutiny"
    hostname: "scrutiny"
    restart: "unless-stopped"
    cap_add:
      - "SYS_RAWIO"
    environment:
      - "SCRUTINY_WEB_SRC_TOKEN"
    ports:
      - "8080:8080" # webapp
    volumes:
      - "/run/udev:/run/udev:ro"
      - "./scrutiny:/opt/scrutiny/config"
    devices:
      - "/dev/sda2:/dev/sda"

  slskd:
    image: "slskd/slskd"
    container_name: "slskd"
    hostname: "slskd"
    restart: "unless-stopped"
    ports:
      - "5030:5030"
      - "50300:50300"
    volumes:
      - "${HOME}/Slskd:/app"
      - "${HOME}/Media/Slskd:/downloads"
    environment:
      - "SLSKD_REMOTE_CONFIGURATION=true"
      - "SLSKD_SHARED_DIR=/downloads"

  sonarr:
    image: "linuxserver/sonarr:latest"
    container_name: "sonarr"
    hostname: "sonarr"
    restart: "unless-stopped"
    ports:
      - "8989:8989"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Sonarr:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"
      - "${HOME}/Media/Television:/tv"
      - "/etc/localtime:/etc/localtime:ro"

  telegraf:
    image: "telegraf:latest"
    container_name: "telegraf"
    hostname: "telegraf"
    restart: "unless-stopped"
    privileged: true
    user: "telegraf:${DOCKER_USER_ID}"
    environment:
      - "INFLUX_TOKEN=${TELEGRAF_INFLUX_TOKEN}"
      - "MINECRAFT_SERVER=${MINECRAFT_SERVER}"
      - "MINECRAFT_PORT=${MINECRAFT_PORT}"
      - "HOST_MOUNT_PREFIX=/hostfs"
      - "HOST_PROC=/hostfs/proc"
    volumes:
      - "./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
      - "/:/hostfs:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"

  traefik:
    image: "traefik:v2.9"
    container_name: "traefik"
    hostname: "traefik"
    restart: "unless-stopped"
    network_mode: "host"
    environment:
      CLOUDFLARE_DNS_API_TOKEN: "${CLOUDFLARE_DNS_API_TOKEN}"
      CLOUDFLARE_ZONE_API_TOKEN: "${CLOUDFLARE_ZONE_API_TOKEN}"
    volumes:
      - "${HOME}/Traefik/acme.json:/acme.json"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/providers.yml:/etc/traefik/providers.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  traefik-forward-auth:
    image: "thomseddon/traefik-forward-auth:latest"
    hostname: "traefik-forward-auth"
    container_name: "traefik-forward-auth"
    restart: "unless-stopped"
    ports:
      - "4181:4181"
    environment:
      - "PROVIDERS_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}"
      - "PROVIDERS_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}"
      - "SECRET=${AUTH_SECRET}"
      - "CONFIG=/config.json"
      - "WHITELIST=jimeagle@gmail.com,gillianmckinley30@gmail.com"
      - "INSECURE_COOKIE=true"
