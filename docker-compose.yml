version: '3'
services:

  traefik:
    container_name: "traefik"
    hostname: "traefik"
    image: "traefik:v2.6"
    restart: unless-stopped
    command:
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"

      - "--accesslog=false"
      - "--api.dashboard=false"
      - "--experimental.http3=true"

      - "--entrypoints.web.enablehttp3=true"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
    environment:
      CLOUDFLARE_DNS_API_TOKEN: "${CLOUDFLARE_DNS_API_TOKEN}"
      CLOUDFLARE_ZONE_API_TOKEN: "${CLOUDFLARE_ZONE_API_TOKEN}"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  radarr:
    image: linuxserver/radarr:latest
    hostname: radarr
    container_name: radarr
    restart: "unless-stopped"
    ports:
      - "7878:7878"
    volumes:
      - ${HOME}/Radarr:/config
      - ${HOME}/NZBGet/Downloads:/downloads
      - ${HOME}/Media/Movies:/movies
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    labels:
      - "traefik.enable=true"
      - "traefik.port=7878"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`radarr.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  sonarr:
    image: linuxserver/sonarr:latest
    hostname: sonarr
    container_name: sonarr
    restart: "unless-stopped"
    ports:
      - "8989:8989"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ${HOME}/Sonarr:/config
      - ${HOME}/NZBGet/Downloads:/downloads
      - ${HOME}/Media/Television:/tv
      - /etc/localtime:/etc/localtime:ro
    labels:
      - "traefik.enable=true"
      - "traefik.port=8989"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`sonarr.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  hydra:
    image: linuxserver/nzbhydra2:latest
    hostname: hydra
    container_name: hydra
    restart: "unless-stopped"
    ports:
      - "5076:5076"
    volumes:
      - ${HOME}/Hydra/Config:/config
      - ${HOME}/Hydra/Downloads:/downloads
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    labels:
      - "traefik.enable=true"
      - "traefik.port=5076"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`hydra.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  nzbget:
    image: linuxserver/nzbget:latest
    hostname: nzbget
    container_name: nzbget
    restart: "unless-stopped"
    ports:
      - "6789:6789"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    volumes:
      - ${HOME}/NZBGet/Config:/config
      - ${HOME}/NZBGet/Downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.port=6789"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`nzbget.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  plex:
    image: linuxserver/plex:latest
    hostname: plex
    container_name: plex
    network_mode: "host"
    restart: "unless-stopped"
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
      - VERSION=latest
    volumes:
      - ${HOME}/Plex/Transcoding:/transcode
      - ${HOME}/Plex/Config:/config
      - ${HOME}/Media/Television:/data/tvshows
      - ${HOME}/Media/Movies:/data/movies
      - ${HOME}/Media/YouTube:/data/youtube

  ouroboros:
    image: pyouroboros/ouroboros:latest
    hostname: ouroboros
    container_name: ouroboros
    restart: "unless-stopped"
    environment:
      - CLEANUP=true
      - SELF_UPDATE=true
      - MONITOR="radarr sonarr hydra nzbget plex portainer hass nodered mosquitto ddns phlex"
      - CRON="2 12 * * *"
      - LOG_LEVEL=info
      - NOTIFIERS=${OUROBOROS_SLACK_TOKEN}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  ddns:
    container_name: ddns
    hostname: ddns
    image: jimeagle/digital-ocean-ddns:latest
    restart: "unless-stopped"
    environment:
      - DO_KEY=${DDNS_DO_KEY}
      - CF_KEY=${DDNS_CF_KEY}
      - ONE_TIME=false
      - ON_LOAD=true
    volumes:
      - ${HOME}/DDNS/records.yaml:/root/records.yaml:ro

  tubesync:
    image: ghcr.io/meeb/tubesync:v0.9.1
    hostname: tubesync
    container_name: tubesync
    ports:
      - "4848:4848"
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - HTTP_USER=$TUBE_SYNC_USER
      - HTTP_PASS=$TUBE_SYNC_PASS
    volumes:
      - ${HOME}/TubeSync:/config
      - ${HOME}/Media/YouTube:/downloads
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.port=4848"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`tubesync.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  #  portainer:
  #    image: portainer/portainer:latest
  #    hostname: portainer
  #    container_name: portainer
  #    restart: "unless-stopped"
  #    ports:
  #      - "9000:9000"
  #    volumes:
  #      - ${HOME}/Portainer:/data
  #      - /var/run/docker.sock:/var/run/docker.sock

  hass:
    image: homeassistant/home-assistant:latest
    hostname: hass
    container_name: hass
    restart: "unless-stopped"
    network_mode: host
    privileged: true
    volumes:
      - ${HOME}/Hass:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - TZ=Europe/London
    #    devices:
    #      - /dev/ttyUSB0:/dev/ttyUSB0
    labels:
      - "traefik.enable=true"
      - "traefik.port=8123"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`hass.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  nodered:
    image: nodered/node-red:latest
    hostname: nodered
    container_name: nodered
    restart: "unless-stopped"
    environment:
      - TZ=Europe/London
    ports:
      - "1880:1880"
      - "1881:1881"
    volumes:
      - ${HOME}/NodeRed:/data
    labels:
      - "traefik.enable=true"
      - "traefik.port=1880"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`nodered.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana:latest
    restart: "unless-stopped"
    ports:
      - "3000:3000"
    user: "0"
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini:ro
      - ./grafana/key.json:/etc/grafana/key.json:ro
      - ${HOME}/Grafana/lib:/var/lib/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.port=3000"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`grafana.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  grafana-image-renderer:
    container_name: grafana-image-renderer
    hostname: grafana-image-renderer
    image: grafana/grafana-image-renderer:latest
    restart: "unless-stopped"
    environment:
      ENABLE_METRICS: 'false'

  phlex:
    image: digitalhigh/phlex:latest
    hostname: phlex
    container_name: phlex
    restart: "unless-stopped"
    volumes:
      - ${HOME}/Phlex:/config
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=Europe/London
    ports:
      - "5666:80"
    labels:
      - "traefik.enable=true"
      - "traefik.port=5666"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`phlex.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  bazarr:
    image: linuxserver/bazarr:latest
    hostname: bazarr
    container_name: bazarr
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - UMASK_SET=022 #optional
    volumes:
      - ${HOME}/Bazarr:/config
      - ${HOME}/Media/Movies:/movies
      - ${HOME}/Media/Television:/tv
    ports:
      - "6767:6767"
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.port=6767"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`bazarr.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  netdata:
    image: netdata/netdata:latest
    hostname: netdata
    container_name: netdata
    restart: "unless-stopped"
    ports:
      - "19999:19999"
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      - "traefik.port=19999"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.rule=Host(`netdata.jimeagle.com`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=80"

  #  mosquitto:
  #    image: eclipse-mosquitto:latest
  #    hostname: mosquitto
  #    container_name: mosquitto
  #    ports:
  #      - "1883:1883"
  #      - "9001:9001"
  #    volumes:
  #      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
  #      - ${HOME}/Mosquitto/Log/mosquitto.log:/mosquitto/log/mosquitto.log
  #      - ${HOME}/Mosquitto/Data:/mosquitto/data

  #  ombi:
  #    image: linuxserver/ombi:latest
  #    hostname: ombi
  #    container_name: ombi
  #    restart: "unless-stopped"
  #    ports:
  #    - "3579:3579"
  #    volumes:
  #    - ${HOME}/Ombi:/config
  #    environment:
  #    - PGID=1000
  #    - TZ=Europe/London

  #  overseerr:
  #    image: sctx/overseerr:latest
  #    hostname: overseerr
  #    container_name: overseerr
  #    restart: "unless-stopped"
  #    ports:
  #      - "5055:5055"
  #    volumes:
  #      - ${HOME}/Overseerr:/app/config
  #    environment:
  #      - TZ=Europe/London

  #  pihole:
  #    image: pihole/pihole:latest
  #    dns:
  #      - 127.0.0.1
  #      - 1.1.1.1
  #    ports:
  #      - "53:53/tcp"
  #      - "53:53/udp"
  #      - "80:80/tcp"
  #      - "443:443/tcp"
  #    # The 3 lines below are required if Pi-hole is to provide DHCP
  #    # cap_add:
  #    #  - NET_ADMIN
  #    # network_mode: "host"
  #    environment:
  #      # enter your docker host IP here
  #      ServerIP:
  #      # IPv6 Address if your network supports it
  #      #ServerIPv6: 192.168.1.55
  #      # jwilder/proxy envs, see readme for more info
  #      PROXY_LOCATION: pihole
  #      VIRTUAL_HOST: pihole.yourdomain.local
  #      VIRTUAL_PORT: 80
  #    # Add your own custom hostnames you need for your domain
  #    extra_hosts:
  #      #   Point any of the jwilder virtual_host addresses
  #      # to your docker host ip address
  #      - 'pihole.yourdomain.local:192.168.1.55'
  #    volumes:
  #    # - '/etc/pihole/:/etc/pihole/'
  #    # WARNING: if this log doesn't exist as a file on the host already
  #    # docker will try to create a directory in its place making for lots of errors
  #    # - '/var/log/pihole.log:/var/log/pihole.log'
  #    restart: always
