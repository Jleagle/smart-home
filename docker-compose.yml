version: '3'

services:

  adguard:
    image: "adguard/adguardhome:latest"
    container_name: "adguard"
    hostname: "adguard"
    restart: "unless-stopped"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8089:80"
    environment:
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/AdGuard/Work:/opt/adguardhome/work"
      - "${HOME}/AdGuard/Conf:/opt/adguardhome/conf"

  autoheal:
    image: "willfarrell/autoheal:latest"
    container_name: "autoheal"
    hostname: "autoheal"
    restart: "unless-stopped"
    environment:
      - "AUTOHEAL_CONTAINER_LABEL=all"
      - "AUTOHEAL_INTERVAL=10"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  bazarr:
    image: "linuxserver/bazarr:latest"
    container_name: "bazarr"
    hostname: "bazarr"
    restart: "unless-stopped"
    ports:
      - "6767:6767"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
      - "UMASK_SET=022" #optional
    volumes:
      - "${HOME}/Bazarr:/config"
      - "${HOME}/Media/Movies:/movies"
      - "${HOME}/Media/Television:/tv"

  ddns:
    image: "ghcr.io/jleagle/ddns:latest"
    container_name: "ddns"
    hostname: "ddns"
    restart: "unless-stopped"
    environment:
      - "DO_KEY=${DDNS_DO_KEY}"
      - "CF_KEY=${DDNS_CF_KEY}"
      - "ONE_TIME=false"
      - "ON_LOAD=true"
    volumes:
      - "${HOME}/DDNS/records.yaml:/root/records.yaml:ro"

  doubletake:
    image: "jakowenko/double-take:latest"
    container_name: "doubletake"
    hostname: "doubletake"
    restart: "unless-stopped"
    ports:
      - "3000:3000"
    volumes:
      - "${HOME}/DoubleTake:/.storage"
      - "./doubletake/config.yml:/.storage/config.yml"

  esphome:
    image: "esphome/esphome:latest"
    container_name: "esphome"
    hostname: "esphome"
    restart: "unless-stopped"
    network_mode: "host"
    volumes:
      - "${HOME}/ESPHome:/config"
      - "/etc/localtime:/etc/localtime:ro"

  frigate:
    image: "blakeblackshear/frigate:0.9.4-amd64"
    container_name: "frigate"
    hostname: "frigate"
    restart: "unless-stopped"
    #privileged: true # this may not be necessary for all setups
    shm_size: "64mb" # update for your cameras based on calculation above
    #    devices:
    #      - /dev/bus/usb:/dev/bus/usb # passes the USB Coral, needs to be modified for other versions
    #      - /dev/apex_0:/dev/apex_0 # passes a PCIe Coral, follow driver instructions here https://coral.ai/docs/m2/get-started/#2a-on-linux
    #      - /dev/dri/renderD128 # for intel hwaccel, needs to be updated for your hardware
    volumes:
      - "${HOME}/Frigate/config.yml:/config/config.yml:ro"
      - "${HOME}/Media/Frigate:/media/frigate"
      - "/etc/localtime:/etc/localtime:ro"
      - type: "tmpfs" # Optional: 1GB of memory, reduces SSD/SD Card wear
        target: "/tmp/cache"
        tmpfs:
          size: 1000000000
    ports:
      - "1935:1935" # RTMP feeds
    environment:
      FRIGATE_RTSP_PASSWORD: "password"

  grafana:
    image: "grafana/grafana:main"
    container_name: "grafana"
    hostname: "grafana"
    restart: "unless-stopped"
    user: "0"
    ports:
      - "3001:3000"
    environment:
      - "GRAFANA_SMTP_PASS"
    volumes:
      - "${HOME}/Grafana/Data:/var/lib/grafana"
      - "./grafana/grafana.ini:/etc/grafana/grafana.ini:ro"

  grafana-image-renderer:
    image: "grafana/grafana-image-renderer:latest"
    container_name: "grafana-image-renderer"
    hostname: "grafana-image-renderer"
    restart: "unless-stopped"

  hass:
    image: "homeassistant/home-assistant:latest"
    container_name: "hass"
    hostname: "hass"
    restart: "unless-stopped"
    network_mode: "host"
    privileged: true
    devices:
      - "/dev/gpiomem:/dev/gpiomem"
    volumes:
      - "${HOME}/Hass/Config:/config"
      - "${HOME}/Hass/google_assistant_key.json:/config/google_assistant_key.json:ro"
      - "./hass/config.yml:/config/configuration.yaml"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "TZ=Europe/London"

  homarr:
    image: "ghcr.io/ajnart/homarr:latest"
    container_name: "homarr"
    hostname: "homarr"
    restart: "unless-stopped"
    volumes:
      - "${HOME}/Homarr/configs:/app/data/configs"
      - "${HOME}/Homarr/icons:/app/public/icons"
    ports:
      - '7575:7575'

  influx:
    image: "influxdb:2.1"
    container_name: "influx"
    hostname: "influx"
    restart: "unless-stopped"
    ports:
      - "8086:8086"
    volumes:
      - "${HOME}/Influx:/home/influxdb/.influxdbv2/"
      - "./influx/config.yml:/etc/influxdb2/config.yml:ro"

  kuma:
    image: "louislam/uptime-kuma:latest"
    hostname: "kuma"
    container_name: "kuma"
    restart: "unless-stopped"
    ports:
      - "3002:3001"
    volumes:
      - "${HOME}/UptimeKuma:/app/data"

  mealie:
    image: "hkotel/mealie:latest"
    container_name: "mealie"
    hostname: "mealie"
    restart: "unless-stopped"
    volumes:
      - "${HOME}/Mealie:/app/data"
    ports:
      - "9925:80"
      - "9000:9000"
    environment:
      TZ: "Europe/London"
      DB_ENGINE: "sqlite"
      BASE_URL: "https://mealie.jimeagle.com/"
      TOKEN_TIME: "12"

  #  minecraft:
  #    image: "itzg/minecraft-bedrock-server"
  #    container_name: "minecraft"
  #    hostname: "minecraft"
  #    restart: "unless-stopped"
  #    ports:
  #      - "25565:25565/udp"
  #    volumes:
  #      - "${HOME}/Minecraft:/data"
  #    environment:
  #      EULA: "TRUE"
  #      GAMEMODE: "survival"
  #      DIFFICULTY: "hard"
  #      VERSION: "LATEST"
  #      MAX_PLAYERS: 4

  mosquitto:
    image: "eclipse-mosquitto:latest"
    container_name: "mosquitto"
    hostname: "mosquitto"
    restart: "unless-stopped"
    ports:
      - "1883:1883"
    volumes:
      - "${HOME}/Mosquitto/Log/mosquitto.log:/mosquitto/log/mosquitto.log"
      - "${HOME}/Mosquitto/Data:/mosquitto/data"
      - "./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf"

  nodered:
    image: "nodered/node-red:latest"
    container_name: "nodered"
    hostname: "nodered"
    restart: "unless-stopped"
    user: "root"
    ports:
      - "1880:1880"
    environment:
      - "HTTP_USERNAME=${NODE_RED_HTTP_USERNAME}"
      - "HTTP_PASSWORD=${NODE_RED_HTTP_PASSWORD}"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/NodeRed:/data"
      - "./node-red/settings.js:/data/settings.js:ro"

  nzbget:
    image: "linuxserver/nzbget:latest"
    container_name: "nzbget"
    hostname: "nzbget"
    restart: "unless-stopped"
    ports:
      - "6789:6789"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/NZBGet/Config:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"

  overseerr:
    image: "linuxserver/overseerr:latest"
    container_name: "overseerr"
    hostname: "overseerr"
    restart: "unless-stopped"
    ports:
      - "5055:5055"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Overseerr:/config"

  plex:
    image: "linuxserver/plex:latest"
    container_name: "plex"
    hostname: "plex"
    restart: "unless-stopped"
    network_mode: "host"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
      - "VERSION=latest"
    volumes:
      - "${HOME}/Plex/Transcoding:/transcode"
      - "${HOME}/Plex/Config:/config"
      - "${HOME}/Media/Television:/data/tvshows"
      - "${HOME}/Media/Movies:/data/movies"
      - "${HOME}/Media/YouTube:/data/youtube"
    devices:
      - "/dev/dri:/dev/dri" # Quicksync

  prowlarr:
    image: "linuxserver/prowlarr:develop"
    container_name: "prowlarr"
    hostname: "prowlarr"
    restart: "unless-stopped"
    ports:
      - "9696:9696"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Prowlarr:/config"

  radarr:
    image: "linuxserver/radarr:latest"
    container_name: "radarr"
    hostname: "radarr"
    restart: "unless-stopped"
    ports:
      - "7878:7878"
    volumes:
      - "${HOME}/Radarr:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"
      - "${HOME}/Media/Movies:/movies"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"

  sonarr:
    image: "linuxserver/sonarr:latest"
    container_name: "sonarr"
    hostname: "sonarr"
    restart: "unless-stopped"
    ports:
      - "8989:8989"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Sonarr:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"
      - "${HOME}/Media/Television:/tv"
      - "/etc/localtime:/etc/localtime:ro"

  syncthing:
    image: "lscr.io/linuxserver/syncthing"
    container_name: "syncthing"
    hostname: "syncthing"
    restart: "unless-stopped"
    ports:
      - "8384:8384"
      - "22000:22000/tcp"
      - "22000:22000/udp"
      - "21027:21027/udp"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Syncthing/Config:/config"
      - "${HOME}/Syncthing/Data:/config/Default"

  tautulli:
    image: "lscr.io/linuxserver/tautulli:latest"
    container_name: "tautulli"
    hostname: "tautulli"
    restart: "unless-stopped"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Tautulli:/config"
    ports:
      - "8181:8181"

  telegraf:
    image: "telegraf:latest"
    container_name: "telegraf"
    hostname: "telegraf"
    restart: "unless-stopped"
    privileged: true
    user: "telegraf:${DOCKER_USER_ID}"
    environment:
      - "INFLUX_TOKEN=${TELEGRAF_INFLUX_TOKEN}"
      - "MINECRAFT_SERVER=${MINECRAFT_SERVER}"
      - "MINECRAFT_PORT=${MINECRAFT_PORT}"
      - "HOST_MOUNT_PREFIX=/hostfs"
      - "HOST_PROC=/hostfs/proc"
    volumes:
      - "./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
      - "/:/hostfs:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"

  traefik:
    image: "traefik:v2.7"
    container_name: "traefik"
    hostname: "traefik"
    restart: "unless-stopped"
    network_mode: "host"
    command:
      # Enable Hub communication (open the port 9900 and 9901 by default)
      - "--experimental.hub=true"
      - "--hub.tls.insecure=true"
    environment:
      CLOUDFLARE_DNS_API_TOKEN: "${CLOUDFLARE_DNS_API_TOKEN}"
      CLOUDFLARE_ZONE_API_TOKEN: "${CLOUDFLARE_ZONE_API_TOKEN}"
    volumes:
      - "${HOME}/Traefik/acme.json:/acme.json"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/providers.yml:/etc/traefik/providers.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  traefik-forward-auth:
    image: "thomseddon/traefik-forward-auth:latest"
    hostname: "traefik-forward-auth"
    container_name: "traefik-forward-auth"
    restart: "unless-stopped"
    ports:
      - "4181:4181"
    environment:
      - "PROVIDERS_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}"
      - "PROVIDERS_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}"
      - "SECRET=${AUTH_SECRET}"
      - "CONFIG=/config.json"
      - "WHITELIST=jimeagle@gmail.com"
      - "INSECURE_COOKIE=true"
