version: '3'

services:

  2fauth:
    image: "2fauth/2fauth:latest"
    container_name: "2fauth"
    volumes:
      - "${HOME}/2FAuth:/2fauth"
    ports:
      - "8000:8000/tcp"
    environment:
      - "SITE_OWNER=jimeagle@gmail.com"
      - "APP_KEY=${TWOFAUTH_KEY}"
      - "APP_URL=2fauth.jimeagle.com"

  adguard:
    image: "adguard/adguardhome:latest"
    container_name: "adguard"
    hostname: "adguard"
    restart: "unless-stopped"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8089:80"
    environment:
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/AdGuard/Work:/opt/adguardhome/work"
      - "${HOME}/AdGuard/Conf:/opt/adguardhome/conf"

  autoheal:
    image: "willfarrell/autoheal:latest"
    container_name: "autoheal"
    hostname: "autoheal"
    restart: "unless-stopped"
    environment:
      - "AUTOHEAL_CONTAINER_LABEL=all"
      - "AUTOHEAL_INTERVAL=10"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  changedetection:
    image: "ghcr.io/dgtlmoon/changedetection.io:latest"
    container_name: "changedetection"
    hostname: "changedetection"
    restart: "unless-stopped"
    ports:
      - "5001:5000"
    volumes:
      - "${HOME}/ChangeDetection:/datastore"

  ddns:
    image: "ghcr.io/jleagle/ddns:latest"
    container_name: "ddns"
    hostname: "ddns"
    restart: "unless-stopped"
    environment:
      - "DO_KEY=${DDNS_DO_KEY}"
      - "CF_KEY=${DDNS_CF_KEY}"
      - "ONE_TIME=false"
      - "ON_LOAD=true"
    volumes:
      - "${HOME}/DDNS/records.yaml:/root/records.yaml:ro"

  #  doubletake:
  #    image: "jakowenko/double-take:latest"
  #    container_name: "doubletake"
  #    hostname: "doubletake"
  #    restart: "unless-stopped"
  #    ports:
  #      - "3000:3000"
  #    volumes:
  #      - "${HOME}/DoubleTake:/.storage"
  #      - "./doubletake/config.yml:/.storage/config.yml"

  #  esphome:
  #    image: "esphome/esphome:latest"
  #    container_name: "esphome"
  #    hostname: "esphome"
  #    restart: "unless-stopped"
  #    network_mode: "host"
  #    volumes:
  #      - "${HOME}/ESPHome:/config"
  #      - "/etc/localtime:/etc/localtime:ro"

  frigate:
    image: "ghcr.io/blakeblackshear/frigate:stable"
    container_name: "frigate"
    hostname: "frigate"
    restart: "unless-stopped"
    shm_size: "64mb" # update for your cameras based on calculation above
    devices:
      - "/dev/dri/renderD128"       # for intel hwaccel, needs to be updated for your hardware
      - "/dev/apex_0:/dev/apex_0"   # passes a PCIe Coral, follow driver instructions here https://coral.ai/docs/m2/get-started/#2a-on-linux
    volumes:
      - "${HOME}/Media/Frigate:/media/frigate"
      - "./frigate/config.yml:/config/config.yml:ro"
      - "/etc/localtime:/etc/localtime:ro"
    tmpfs:
      - "/tmp/cache"
    ports:
      - "1935:1935" # RTMP feeds
      - "5000:5000" # API
    environment:
      - "FRIGATE_KITCHEN_USERNAME"
      - "FRIGATE_KITCHEN_PASSWORD"
      - "FRIGATE_DINING_USERNAME"
      - "FRIGATE_DINING_PASSWORD"

  grafana:
    image: "grafana/grafana:latest"
    container_name: "grafana"
    hostname: "grafana"
    restart: "unless-stopped"
    user: "0"
    ports:
      - "3001:3000"
    environment:
      - "GRAFANA_SMTP_PASS"
    volumes:
      - "${HOME}/Grafana/Data:/var/lib/grafana"
      - "./grafana/grafana.ini:/etc/grafana/grafana.ini:ro"

  grafana-image-renderer:
    image: "grafana/grafana-image-renderer:latest"
    container_name: "grafana-image-renderer"
    hostname: "grafana-image-renderer"
    restart: "unless-stopped"

  hass:
    image: "homeassistant/home-assistant:latest"
    container_name: "hass"
    hostname: "hass"
    restart: "unless-stopped"
    network_mode: "host"
    privileged: true
    devices:
      - "/dev/gpiomem:/dev/gpiomem"
      - "/dev/ttyUSB0:/dev/ttyUSB0"
    volumes:
      - "${HOME}/Hass/Config:/config"
      - "${HOME}/Hass/google_assistant_key.json:/config/google_assistant_key.json:ro"
      - "./hass/config.yml:/config/configuration.yaml"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "TZ=Europe/London"

  influx:
    image: "influxdb:2.5"
    container_name: "influx"
    hostname: "influx"
    restart: "unless-stopped"
    ports:
      - "8086:8086"
    volumes:
      - "${HOME}/Influx:/home/influxdb/.influxdbv2/"
      - "./influx/config.yml:/etc/influxdb2/config.yml:ro"

  kuma:
    image: "louislam/uptime-kuma:latest"
    hostname: "kuma"
    container_name: "kuma"
    restart: "unless-stopped"
    ports:
      - "3002:3001"
    volumes:
      - "${HOME}/UptimeKuma:/app/data"

  mosquitto:
    image: "eclipse-mosquitto:latest"
    container_name: "mosquitto"
    hostname: "mosquitto"
    restart: "unless-stopped"
    ports:
      - "1883:1883"
    volumes:
      - "${HOME}/Mosquitto/Log/mosquitto.log:/mosquitto/log/mosquitto.log"
      - "${HOME}/Mosquitto/Data:/mosquitto/data"
      - "./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf"

  nodered:
    image: "nodered/node-red:latest"
    container_name: "nodered"
    hostname: "nodered"
    restart: "unless-stopped"
    user: "root"
    ports:
      - "1880:1880"
    environment:
      - "HTTP_USERNAME=${NODE_RED_HTTP_USERNAME}"
      - "HTTP_PASSWORD=${NODE_RED_HTTP_PASSWORD}"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/NodeRed:/data"
      - "./node-red/settings.js:/data/settings.js:ro"

  nzbget:
    image: "linuxserver/nzbget:latest"
    container_name: "nzbget"
    hostname: "nzbget"
    restart: "unless-stopped"
    ports:
      - "6789:6789"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/NZBGet/Config:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"

  overseerr:
    image: "linuxserver/overseerr:latest"
    container_name: "overseerr"
    hostname: "overseerr"
    restart: "unless-stopped"
    ports:
      - "5055:5055"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Overseerr:/config"

  plex:
    image: "linuxserver/plex:latest"
    container_name: "plex"
    hostname: "plex"
    restart: "unless-stopped"
    network_mode: "host"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
      - "VERSION=latest"
    volumes:
      #- "${HOME}/Plex/Transcoding:/transcode"
      - "/dev/shm:/transcode"
      - "${HOME}/Plex/Config:/config"
      - "${HOME}/Media/Television:/data/tvshows"
      - "${HOME}/Media/Movies:/data/movies"
      - "${HOME}/Media/YouTube:/data/youtube"
      - "${HOME}/Media/Frigate:/data/frigate"
    devices:
      - "/dev/dri:/dev/dri" # Quicksync

  portainer:
    image: "portainer/portainer:latest"
    hostname: "portainer"
    container_name: "portainer"
    restart: "unless-stopped"
    ports:
      - "9001:9000"
    volumes:
      - "${HOME}/Portainer:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"

  postgres:
    image: "postgres:15"
    hostname: "postgres"
    container_name: "postgres"
    restart: "unless-stopped"
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    environment:
      - "POSTGRES_USER=${POSTGRES_USER}"
      - "POSTGRES_PASSWORD=${POSTGRES_PASS}"
    volumes:
      - "${HOME}/Postgres/Data:/var/lib/postgresql/data"

  prowlarr:
    image: "linuxserver/prowlarr:develop"
    container_name: "prowlarr"
    hostname: "prowlarr"
    restart: "unless-stopped"
    ports:
      - "9696:9696"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Prowlarr:/config"

  radarr:
    image: "linuxserver/radarr:latest"
    container_name: "radarr"
    hostname: "radarr"
    restart: "unless-stopped"
    ports:
      - "7878:7878"
    volumes:
      - "${HOME}/Radarr:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"
      - "${HOME}/Media/Movies:/movies"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"

  redis:
    image: "redis:7"
    container_name: "redis"
    hostname: "redis"
    restart: "unless-stopped"
    volumes:
      - "${HOME}/Redis/Data:/data"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

  scrutiny:
    image: "ghcr.io/analogj/scrutiny:master-omnibus"
    container_name: "scrutiny"
    hostname: "scrutiny"
    restart: "unless-stopped"
    cap_add:
      - "SYS_RAWIO"
    environment:
      - "SCRUTINY_WEB_SRC_TOKEN"
    ports:
      - "8080:8080" # webapp
    volumes:
      - "/run/udev:/run/udev:ro"
      - "./scrutiny:/opt/scrutiny/config"
    devices:
      - "/dev/sda2:/dev/sda"

  serpbear:
    image: "towfiqi/serpbear:latest"
    container_name: "serpbear"
    hostname: "serpbear"
    restart: "unless-stopped"
    ports:
      - "3004:3000"
    volumes:
      - "${HOME}/SerpBear:/app/data"
    environment:
      - "USER=${SERPBEAR_USERNAME}"
      - "PASSWORD=${SERPBEAR_PASSWORD}"
      - "SECRET=${SERPBEAR_SECRET}"
      - "APIKEY=${SERPBEAR_APIKEY}"
      - "NEXT_PUBLIC_APP_URL=https://serpbear.jimeagle.com/"

  sonarr:
    image: "linuxserver/sonarr:latest"
    container_name: "sonarr"
    hostname: "sonarr"
    restart: "unless-stopped"
    ports:
      - "8989:8989"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Sonarr:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"
      - "${HOME}/Media/Television:/tv"
      - "/etc/localtime:/etc/localtime:ro"

  tautulli:
    image: "lscr.io/linuxserver/tautulli:latest"
    container_name: "tautulli"
    hostname: "tautulli"
    restart: "unless-stopped"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Tautulli:/config"
    ports:
      - "8181:8181"

  technitium:
    container_name: "technitium"
    image: "technitium/dns-server:latest"
    restart: "unless-stopped"
    hostname: "technitium"
    # For DHCP deployments, use "host" network mode and remove all the port mappings, including the ports array by commenting them
    # network_mode: "host"
    ports:
      - "5380:5380/tcp" #DNS web console (HTTP)
      # - "53443:53443/tcp" #DNS web console (HTTPS)
      # - "53:53/udp" #DNS service
      # - "53:53/tcp" #DNS service
      # - "853:853/udp" #DNS-over-QUIC service
      # - "853:853/tcp" #DNS-over-TLS service
      # - "443:443/udp" #DNS-over-HTTPS service (HTTP/3)
      # - "443:443/tcp" #DNS-over-HTTPS service (HTTP/1.1, HTTP/2)
      # - "80:80/tcp" #DNS-over-HTTP service (use with reverse proxy or certbot certificate renewal)
      # - "8053:8053/tcp" #DNS-over-HTTP service (use with reverse proxy)
      # - "67:67/udp" #DHCP service
    environment:
      - DNS_SERVER_DOMAIN=technitium #The primary domain name used by this DNS Server to identify itself.
      # - DNS_SERVER_ADMIN_PASSWORD=password #DNS web console admin user password.
      # - DNS_SERVER_ADMIN_PASSWORD_FILE=password.txt #The path to a file that contains a plain text password for the DNS web console admin user.
      # - DNS_SERVER_PREFER_IPV6=false #DNS Server will use IPv6 for querying whenever possible with this option enabled.
      # - DNS_SERVER_WEB_SERVICE_HTTP_PORT=5380 #The TCP port number for the DNS web console over HTTP protocol.
      # - DNS_SERVER_WEB_SERVICE_HTTPS_PORT=53443 #The TCP port number for the DNS web console over HTTPS protocol.
      # - DNS_SERVER_WEB_SERVICE_ENABLE_HTTPS=false #Enables HTTPS for the DNS web console.
      # - DNS_SERVER_WEB_SERVICE_USE_SELF_SIGNED_CERT=false #Enables self signed TLS certificate for the DNS web console.
      # - DNS_SERVER_OPTIONAL_PROTOCOL_DNS_OVER_HTTP=false #Enables DNS server optional protocol DNS-over-HTTP on TCP port 8053 to be used with a TLS terminating reverse proxy like nginx.
      # - DNS_SERVER_RECURSION=AllowOnlyForPrivateNetworks #Recursion options: Allow, Deny, AllowOnlyForPrivateNetworks, UseSpecifiedNetworks.
      # - DNS_SERVER_RECURSION_DENIED_NETWORKS=1.1.1.0/24 #Comma separated list of IP addresses or network addresses to deny recursion. Valid only for `UseSpecifiedNetworks` recursion option.
      # - DNS_SERVER_RECURSION_ALLOWED_NETWORKS=127.0.0.1, 192.168.1.0/24 #Comma separated list of IP addresses or network addresses to allow recursion. Valid only for `UseSpecifiedNetworks` recursion option.
      # - DNS_SERVER_ENABLE_BLOCKING=false #Sets the DNS server to block domain names using Blocked Zone and Block List Zone.
      # - DNS_SERVER_ALLOW_TXT_BLOCKING_REPORT=false #Specifies if the DNS Server should respond with TXT records containing a blocked domain report for TXT type requests.
      # - DNS_SERVER_BLOCK_LIST_URLS= #A comma separated list of block list URLs.
      # - DNS_SERVER_FORWARDERS=1.1.1.1, 8.8.8.8 #Comma separated list of forwarder addresses.
      # - DNS_SERVER_FORWARDER_PROTOCOL=Tcp #Forwarder protocol options: Udp, Tcp, Tls, Https, HttpsJson.
      # - DNS_SERVER_LOG_USING_LOCAL_TIME=true #Enable this option to use local time instead of UTC for logging.
    volumes:
      - "${HOME}/Technitium:/etc/dns"
    sysctls:
      - "net.ipv4.ip_local_port_range=1024 65000"

  telegraf:
    image: "telegraf:latest"
    container_name: "telegraf"
    hostname: "telegraf"
    restart: "unless-stopped"
    privileged: true
    user: "telegraf:${DOCKER_USER_ID}"
    environment:
      - "INFLUX_TOKEN=${TELEGRAF_INFLUX_TOKEN}"
      - "MINECRAFT_SERVER=${MINECRAFT_SERVER}"
      - "MINECRAFT_PORT=${MINECRAFT_PORT}"
      - "HOST_MOUNT_PREFIX=/hostfs"
      - "HOST_PROC=/hostfs/proc"
    volumes:
      - "./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro"
      - "/:/hostfs:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"

  traefik:
    image: "traefik:v2.9"
    container_name: "traefik"
    hostname: "traefik"
    restart: "unless-stopped"
    network_mode: "host"
    environment:
      CLOUDFLARE_DNS_API_TOKEN: "${CLOUDFLARE_DNS_API_TOKEN}"
      CLOUDFLARE_ZONE_API_TOKEN: "${CLOUDFLARE_ZONE_API_TOKEN}"
    volumes:
      - "${HOME}/Traefik/acme.json:/acme.json"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/providers.yml:/etc/traefik/providers.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  traefik-forward-auth:
    image: "thomseddon/traefik-forward-auth:latest"
    hostname: "traefik-forward-auth"
    container_name: "traefik-forward-auth"
    restart: "unless-stopped"
    ports:
      - "4181:4181"
    environment:
      - "PROVIDERS_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}"
      - "PROVIDERS_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}"
      - "SECRET=${AUTH_SECRET}"
      - "CONFIG=/config.json"
      - "WHITELIST=jimeagle@gmail.com,gillianmckinley30@gmail.com"
      - "INSECURE_COOKIE=true"

  zinc:
    image: "public.ecr.aws/zinclabs/zinc:latest"
    hostname: "zinc"
    container_name: "zinc"
    restart: "unless-stopped"
    ports:
      - "4080:4080"
    volumes:
      - "${HOME}/Zinc:/data"
    environment:
      - "ZINC_DATA_PATH=/data"
      - "ZINC_FIRST_ADMIN_USER=admin"
      - "ZINC_FIRST_ADMIN_PASSWORD=${ZINC_ADMIN_PASSWORD}"
      - "ZINC_TELEMETRY=false"
