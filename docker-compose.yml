include:
  #  - "docker-compose.doubletake.yml"
  - "docker-compose.share.yml"

services:

  adguard:
    image: "adguard/adguardhome:latest"
    container_name: "adguard"
    hostname: "adguard"
    restart: "unless-stopped"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "8089:80"
    environment:
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/AdGuard/Work:/opt/adguardhome/work"
      - "${HOME}/AdGuard/Conf:/opt/adguardhome/conf"

  autoheal:
    image: "willfarrell/autoheal:latest"
    container_name: "autoheal"
    hostname: "autoheal"
    restart: "unless-stopped"
    environment:
      - "AUTOHEAL_CONTAINER_LABEL=all"
      - "AUTOHEAL_INTERVAL=10"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"

  beszel:
    image: "henrygd/beszel"
    container_name: "beszel"
    hostname: "beszel"
    network_mode: "host"
    restart: "unless-stopped"
    ports:
      - "8090:8090"
    volumes:
      - "${HOME}/Beszel:/beszel_data"
    extra_hosts:
      - 'host.docker.internal:host-gateway'

  beszel-agent:
    image: "henrygd/beszel-agent"
    container_name: "beszel-agent"
    hostname: "beszel-agent"
    network_mode: "host"
    restart: "unless-stopped"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      PORT: 45876
      KEY: "${BESZEL_KEY}"

  changedetection:
    image: "ghcr.io/dgtlmoon/changedetection.io:latest"
    container_name: "changedetection"
    hostname: "changedetection"
    restart: "unless-stopped"
    ports:
      - "5001:5000"
    volumes:
      - "${HOME}/ChangeDetection:/datastore"

  frigate:
    image: "ghcr.io/blakeblackshear/frigate:stable"
    container_name: "frigate"
    hostname: "frigate"
    restart: "unless-stopped"
    shm_size: "128mb" # update for your cameras based on calculation above
    devices:
      - "/dev/dri/renderD128"       # for intel hwaccel, needs to be updated for your hardware
      - "/dev/apex_0:/dev/apex_0"   # passes a PCIe Coral, follow driver instructions here https://coral.ai/docs/m2/get-started/#2a-on-linux
    volumes:
      - "${HOME}/Media/Frigate:/media/frigate"
      - "./frigate:/config"
      - "/etc/localtime:/etc/localtime:ro"
    tmpfs:
      - "/tmp/cache"
    ports:
      - "1935:1935" # RTMP feeds
      - "5000:5000" # API
    environment:
      - "PLUS_API_KEY=${FRIGATE_PLUS_KEY}"
      - "FRIGATE_GENAI_KEY"
      - "FRIGATE_DRIVEWAY_USERNAME"
      - "FRIGATE_DRIVEWAY_PASSWORD"

  hass:
    image: "homeassistant/home-assistant:latest"
    container_name: "hass"
    hostname: "hass"
    restart: "unless-stopped"
    network_mode: "host"
    privileged: true
    devices:
      - "/dev/gpiomem:/dev/gpiomem"
      - "/dev/ttyUSB0:/dev/ttyUSB0"
    volumes:
      - "${HOME}/Hass/Config:/config"
      - "${HOME}/Hass/google_assistant_key.json:/config/google_assistant_key.json:ro"
      - "./hass/config.yml:/config/configuration.yaml"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "TZ=Europe/London"

  huntarr:
    image: "huntarr/huntarr:latest"
    container_name: "huntarr"
    hostname: "huntarr"
    restart: "unless-stopped"
    ports:
      - "9705:9705"
    volumes:
      - "${HOME}/Huntarr:/config"
    environment:
      - "TZ=Europe/London"

  kuma:
    image: "louislam/uptime-kuma:latest"
    hostname: "kuma"
    container_name: "kuma"
    restart: "unless-stopped"
    ports:
      - "3002:3001"
    volumes:
      - "${HOME}/UptimeKuma:/app/data"

  mosquitto:
    image: "eclipse-mosquitto:latest"
    container_name: "mosquitto"
    hostname: "mosquitto"
    restart: "unless-stopped"
    ports:
      - "1883:1883"
    volumes:
      - "${HOME}/Mosquitto/Log/mosquitto.log:/mosquitto/log/mosquitto.log"
      - "${HOME}/Mosquitto/Data:/mosquitto/data"
      - "./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf"

  nodered:
    image: "nodered/node-red:latest"
    container_name: "nodered"
    hostname: "nodered"
    restart: "unless-stopped"
    user: "root"
    ports:
      - "1880:1880"
    environment:
      - "HTTP_USERNAME=${NODE_RED_HTTP_USERNAME}"
      - "HTTP_PASSWORD=${NODE_RED_HTTP_PASSWORD}"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/NodeRed:/data"
      - "${HOME}/Media/Frigate:/media/frigate:ro"
      - "./node-red/settings.js:/data/settings.js:ro"

  nzbget:
    image: "linuxserver/nzbget:latest"
    container_name: "nzbget"
    hostname: "nzbget"
    restart: "unless-stopped"
    ports:
      - "6789:6789"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/NZBGet/Config:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"

  overseerr:
    image: "linuxserver/overseerr:latest"
    container_name: "overseerr"
    hostname: "overseerr"
    restart: "unless-stopped"
    ports:
      - "5055:5055"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Overseerr:/config"
    dns:
      - "1.1.1.1" # Speeds things up for some reason
      - "8.8.8.8"

  plex:
    image: "linuxserver/plex:latest"
    container_name: "plex"
    hostname: "plex"
    restart: "unless-stopped"
    network_mode: "host"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
      - "VERSION=latest"
    volumes:
      #- "${HOME}/Plex/Transcoding:/transcode"
      - "/dev/shm:/transcode"
      - "${HOME}/Plex/Config:/config"
      - "${HOME}/Media/Television:/data/tvshows"
      - "${HOME}/Media/Movies:/data/movies"
      - "${HOME}/Media/YouTube:/data/youtube"
      - "${HOME}/Media/Frigate:/data/frigate"
    devices:
      - "/dev/dri:/dev/dri" # Quicksync

  prowlarr:
    image: "linuxserver/prowlarr:develop"
    container_name: "prowlarr"
    hostname: "prowlarr"
    restart: "unless-stopped"
    ports:
      - "9696:9696"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Prowlarr:/config"

  radarr:
    image: "linuxserver/radarr:latest"
    container_name: "radarr"
    hostname: "radarr"
    restart: "unless-stopped"
    ports:
      - "7878:7878"
    volumes:
      - "${HOME}/Radarr:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"
      - "${HOME}/Media/Movies:/movies"
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
      # https://wiki.servarr.com/en/useful-tools#using-environment-variables-for-config
      - "RADARR__AUTH__REQUIRED=Remote"

  redis:
    image: "redis:7"
    container_name: "redis"
    hostname: "redis"
    restart: "unless-stopped"
    volumes:
      - "${HOME}/Redis/Data:/data"
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s

  scrutiny:
    image: "ghcr.io/analogj/scrutiny:master-omnibus"
    container_name: "scrutiny"
    hostname: "scrutiny"
    restart: "unless-stopped"
    cap_add:
      - "SYS_RAWIO"
    environment:
      - "SCRUTINY_WEB_SRC_TOKEN"
    ports:
      - "8080:8080" # webapp
    volumes:
      - "/run/udev:/run/udev:ro"
      - "./scrutiny:/opt/scrutiny/config"
    devices:
      - "/dev/sda2:/dev/sda"

  slskd:
    image: "slskd/slskd"
    container_name: "slskd"
    hostname: "slskd"
    restart: "unless-stopped"
    ports:
      - "5030:5030"
      - "50300:50300"
    volumes:
      - "${HOME}/Slskd:/app"
      - "${HOME}/Media/Slskd:/downloads"
    environment:
      - "SLSKD_REMOTE_CONFIGURATION=true"
      - "SLSKD_SHARED_DIR=/downloads"

  sonarr:
    image: "linuxserver/sonarr:latest"
    container_name: "sonarr"
    hostname: "sonarr"
    restart: "unless-stopped"
    ports:
      - "8989:8989"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
      # https://wiki.servarr.com/en/useful-tools#using-environment-variables-for-config
      - "SONARR__AUTH__REQUIRED=Remote"
    volumes:
      - "${HOME}/Sonarr:/config"
      - "${HOME}/NZBGet/Downloads:/downloads"
      - "${HOME}/Media/Television:/tv"
      - "/etc/localtime:/etc/localtime:ro"

  strava:
    image: "robiningelbrecht/strava-statistics:latest"
    container_name: "strava"
    hostname: "strava"
    restart: "unless-stopped"
    volumes:
      - "./strava/:/var/www/config/app/"
      - "${HOME}/Strava/build:/var/www/build"
      - "${HOME}/Strava/database:/var/www/storage/database"
      - "${HOME}/Strava/files:/var/www/storage/files"
    ports:
      - "8082:8080"
    environment:
      - "STRAVA_CLIENT_ID=150624"
      - "STRAVA_CLIENT_SECRET=${STRAVA_CLIENT_SECRET}"
      - "STRAVA_REFRESH_TOKEN=${STRAVA_REFRESH_TOKEN}"
      - "IMPORT_AND_BUILD_SCHEDULE='0 4 * * *'"
      - "TZ=Europe/London"

  traefik:
    image: "traefik:v2.9"
    container_name: "traefik"
    hostname: "traefik"
    restart: "unless-stopped"
    network_mode: "host"
    environment:
      CLOUDFLARE_DNS_API_TOKEN: "${CLOUDFLARE_DNS_API_TOKEN}"
      CLOUDFLARE_ZONE_API_TOKEN: "${CLOUDFLARE_ZONE_API_TOKEN}"
    volumes:
      - "${HOME}/Traefik/acme.json:/acme.json"
      - "./traefik/traefik.yml:/etc/traefik/traefik.yml:ro"
      - "./traefik/providers.yml:/etc/traefik/providers.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  tinyauth:
    image: "ghcr.io/steveiliop56/tinyauth:v3"
    container_name: "tinyauth"
    hostname: "tinyauth"
    restart: "unless-stopped"
    environment:
      - "SECRET=${TINYAUTH_SECRET}"
      - "APP_URL=https://login.jimeagle.com/"
      - "OAUTH_WHITELIST=${TINYAUTH_EMAILS}"
      - "PORT=3005"
      - "SESSION_EXPIRY=432000"

  traefik-forward-auth:
    image: "thomseddon/traefik-forward-auth:latest"
    hostname: "traefik-forward-auth"
    container_name: "traefik-forward-auth"
    restart: "unless-stopped"
    ports:
      - "4181:4181"
    environment:
      - "PROVIDERS_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}"
      - "PROVIDERS_GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}"
      - "SECRET=${AUTH_SECRET}"
      - "CONFIG=/config.json"
      - "WHITELIST=${TINYAUTH_EMAILS}"
      - "INSECURE_COOKIE=true"
