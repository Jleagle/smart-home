services:
  assistant-relay:
    image: "apipa169/assistant-relay:latest"
    container_name: "assistant-relay"
    hostname: "assistant-relay"
    restart: "unless-stopped"
    ports:
      - "3003:3000"
    volumes:
      - "${HOME}/AssistantRelay/config.json:/assistant_relay/bin/config.json:rw"
      - "${HOME}/AssistantRelay/Responses:/assistant_relay/bin/audio-responses:rw"

  authentik-server:
    image: "ghcr.io/goauthentik/server:latest"
    container_name: "authentik-server"
    hostname: "authentik-server"
    restart: "unless-stopped"
    ports:
      - "9002:9000"
      - "9443:9443"
    command: "server"
    environment:
      PG_PASS: "${AUTHENTIK_PG_PASS}"
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${AUTHENTIK_POSTGRESQL__PASSWORD}"
    env_file:
      - "./authentik/authentik.env"
    volumes:
      - "${HOME}/Authentik/Media:/media"
      - "${HOME}/Authentik/Templates:/templates"

  authentik-worker:
    image: "ghcr.io/goauthentik/server:latest"
    container_name: "authentik-worker"
    hostname: "authentik-worker"
    restart: "unless-stopped"
    command: "worker"
    environment:
      PG_PASS: "${AUTHENTIK_PG_PASS}"
      AUTHENTIK_SECRET_KEY: "${AUTHENTIK_SECRET_KEY}"
      AUTHENTIK_POSTGRESQL__PASSWORD: "${AUTHENTIK_POSTGRESQL__PASSWORD}"
    env_file:
      - "./authentik/authentik.env"
    #    user: root
    volumes:
      #      - /var/run/docker.sock:/var/run/docker.sock
      - "${HOME}/Authentik/Certs:/certs"
      - "${HOME}/Authentik/Media:/media"
      - "${HOME}/Authentik/Templates:/templates"

  bazarr:
    image: "linuxserver/bazarr:latest"
    container_name: "bazarr"
    hostname: "bazarr"
    restart: "unless-stopped"
    ports:
      - "6767:6767"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
      - "UMASK_SET=022" #optional
    volumes:
      - "${HOME}/Bazarr:/config"
      - "${HOME}/Media/Movies:/movies"
      - "${HOME}/Media/Television:/tv"

  cloudflare:
    image: "cloudflare/cloudflared:latest"
    container_name: "cloudflare"
    hostname: "cloudflare"
    restart: "unless-stopped"
    network_mode: "host"
    command: "tunnel --no-autoupdate run"
    environment:
      - "TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}"

  ddclient:
    image: "lscr.io/linuxserver/ddclient:latest"
    container_name: "ddclient"
    hostname: "ddclient"
    restart: "unless-stopped"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
      - "CF_API_EMAIL_FILE=/run/secrets/cloudflare_login_email"
      - "CF_API_KEY_FILE=/run/secrets/cloudflare_api_token"
    volumes:
      - "${HOME}/Ddclient:/config"

  emby:
    image: "emby/embyserver:latest"
    hostname: "emby"
    container_name: "emby"
    restart: "unless-stopped"
    environment:
      - "UID=1000"
      - "GID=1000"
    ports:
      - "8096:8096"
    volumes:
      - "${MEDIA_DATA}/Docker/Emby/Config:/config"
      - "${MEDIA_DATA}/Television:/mnt/share1"
      - "${MEDIA_DATA}/Video:/mnt/share2"

  flextv:
    image: "digitalhigh/flextv:latest"
    container_name: "flextv"
    hostname: "flextv"
    restart: "unless-stopped"
    ports:
      - "82:80"
    volumes:
      - "${HOME}/FlexTV:/config"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"

  go2rtc:
    image: "alexxit/go2rtc:latest"
    container_name: "go2rtc"
    hostname: "go2rtc"
    restart: "unless-stopped"
    devices:
      - "/dev/dri/renderD128"
    ports:
      - "1984:1984" # API
    environment:
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Go2rtc/Config:/config"

  homarr:
    image: "ghcr.io/ajnart/homarr:latest"
    container_name: "homarr"
    hostname: "homarr"
    restart: "unless-stopped"
    volumes:
      - "${HOME}/Homarr/configs:/app/data/configs"
      - "${HOME}/Homarr/icons:/app/public/icons"
    ports:
      - "7575:7575"

  homepage:
    image: "ghcr.io/gethomepage/homepage:latest"
    container_name: "homepage"
    hostname: "homepage"
    restart: "unless-stopped"
    ports:
      - "3003:3000"
    volumes:
      - "${HOME}/Homepage:/app/config"
      - "./homepage/bookmarks.yaml:/app/config/bookmarks.yaml"
      - "./homepage/docker.yaml:/app/config/docker.yaml"
      - "./homepage/services.yaml:/app/config/services.yaml"
      - "./homepage/settings.yaml:/app/config/settings.yaml"
      - "./homepage/widgets.yaml:/app/config/widgets.yaml"
      - "/var/run/docker.sock:/var/run/docker.sock"
    environment:
      - "HOMEPAGE_VAR_SONARR=${HOMEPAGE_SONARR}"
      - "HOMEPAGE_VAR_RADARR=${HOMEPAGE_RADARR}"
      - "HOMEPAGE_VAR_NZBGET_UN=${HOMEPAGE_NZBGET_UN}"
      - "HOMEPAGE_VAR_NZBGET_PW=${HOMEPAGE_NZBGET_PW}"
      - "HOMEPAGE_VAR_TAUTULLI=${HOMEPAGE_TAUTULLI}"

  hydra:
    image: "linuxserver/nzbhydra2:latest"
    container_name: "hydra"
    hostname: "hydra"
    restart: "unless-stopped"
    ports:
      - "5076:5076"
    volumes:
      - "${HOME}/Hydra/Config:/config"
      - "${HOME}/Hydra/Downloads:/downloads"
    environment:
      - "PGID=1000"
      - "PUID=1000"
      - "TZ=Europe/London"
    labels:
      - "traefik.enable=true"
      - "traefik.port=5076"
      - "traefik.http.routers.hydra.entrypoints=websecure"
      - "traefik.http.routers.hydra.rule=Host(`hydra.jimeagle.com`)"
      - "traefik.http.services.hydra.loadbalancer.server.port=5076"

  matrix:
    image: "matrixdotorg/synapse:latest"
    container_name: "matrix"
    hostname: "matrix"
    restart: "unless-stopped"
    volumes:
      - "${HOME}/Matrix:/data"
    ports:
      - "8008:8008"

  mealie:
    image: "hkotel/mealie:latest"
    container_name: "mealie"
    hostname: "mealie"
    restart: "unless-stopped"
    volumes:
      - "${HOME}/Mealie:/app/data"
    ports:
      - "9925:80"
      - "9000:9000"
    environment:
      TZ: "Europe/London"
      DB_ENGINE: "sqlite"
      BASE_URL: "https://mealie.jimeagle.com/"
      TOKEN_TIME: "12"

  minecraft:
    image: "itzg/minecraft-bedrock-server"
    container_name: "minecraft"
    hostname: "minecraft"
    restart: "unless-stopped"
    ports:
      - "25565:25565/udp"
    volumes:
      - "${HOME}/Minecraft:/data"
    environment:
      EULA: "TRUE"
      GAMEMODE: "survival"
      DIFFICULTY: "hard"
      VERSION: "LATEST"
      MAX_PLAYERS: 4

  mosquitto:
    image: "eclipse-mosquitto:latest"
    container_name: "mosquitto"
    hostname: "mosquitto"
    restart: "unless-stopped"
    ports:
      - "1883:1883"
    volumes:
      - "${HOME}/Mosquitto/Log/mosquitto.log:/mosquitto/log/mosquitto.log"
      - "${HOME}/Mosquitto/Data:/mosquitto/data"
      - "./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf"

  netdata:
    image: "netdata/netdata:latest"
    hostname: "netdata"
    container_name: "netdata"
    restart: "unless-stopped"
    ports:
      - "19999:19999"
    cap_add:
      - "SYS_PTRACE"
    security_opt:
      - "apparmor:unconfined"
    volumes:
      - "/proc:/host/proc:ro"
      - "/sys:/host/sys:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  noip:
    image: "coppit/no-ip:latest"
    hostname: "noip"
    container_name: "noip"
    restart: "unless-stopped"
    environment:
      - "USERNAME=${NOIP_USERNAME}"
      - "PASSWORD=${NOIP_PASSWORD}"
      - "DOMAINS=${NOIP_DOMAINS}"
      - "INTERVAL=30m"
    volumes:
      - "${DOCKER_DATA}/no-ip/config:/config"
      - "/etc/localtime:/etc/localtime:ro"

  overseerr:
    image: "linuxserver/overseerr:latest"
    container_name: "overseerr"
    hostname: "overseerr"
    restart: "unless-stopped"
    ports:
      - "5055:5055"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Overseerr:/config"

  pihole:
    image: "pihole/pihole:latest"
    container_name: "pihole"
    hostname: "pihole"
    restart: "unless-stopped"
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "67:67/udp"
      - "81:80"
    environment:
      TZ: "Europe/London"
      ServerIP: "192.168.0.7"
      WEBPASSWORD: "${PIHOLE_PASSWORD}"
      ADMIN_EMAIL: "jimeagle@gmail.com"
      PIHOLE_DNS_: "1.1.1.1;8.8.8.8"
      VIRTUAL_HOST: "pihole.jimeagle.com"
    volumes:
      - "${HOME}/PiHole/:/etc/pihole/"

  plexmeta:
    image: "meisnate12/plex-meta-manager:latest"
    container_name: "plexmeta"
    hostname: "plexmeta"
    restart: "unless-stopped"
    volumes:
      - "${HOME}/PlexMeta:/config"

  portainer:
    image: "portainer/portainer:latest"
    hostname: "portainer"
    container_name: "portainer"
    restart: "unless-stopped"
    ports:
      - "9001:9000"
    volumes:
      - "${HOME}/Portainer:/data"
      - "/var/run/docker.sock:/var/run/docker.sock"

  serpbear:
    image: "towfiqi/serpbear:latest"
    container_name: "serpbear"
    hostname: "serpbear"
    restart: "unless-stopped"
    ports:
      - "3004:3000"
    volumes:
      - "${HOME}/SerpBear:/app/data"
    environment:
      - "USER=${SERPBEAR_USERNAME}"
      - "PASSWORD=${SERPBEAR_PASSWORD}"
      - "SECRET=${SERPBEAR_SECRET}"
      - "APIKEY=${SERPBEAR_APIKEY}"
      - "NEXT_PUBLIC_APP_URL=https://serpbear.jimeagle.com/"

  traefik-hub-agent:
    image: "ghcr.io/traefik/hub-agent-traefik:latest"
    container_name: "traefik-hub-agent"
    restart: "unless-stopped"
    network_mode: "host"
    command:
      - "run"
      - "--hub.token=${TRAEFIK_HUB_TOKEN}"
      - "--auth-server.advertise-url=http://hub-agent"
      - "--traefik.host=traefik"
      - "--traefik.tls.insecure=true"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - "traefik"

  syncthing:
    image: "lscr.io/linuxserver/syncthing"
    container_name: "syncthing"
    hostname: "syncthing"
    restart: "unless-stopped"
    ports:
      - "8384:8384"
      - "22000:22000/tcp"
      - "22000:22000/udp"
      - "21027:21027/udp"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
    volumes:
      - "${HOME}/Syncthing/Config:/config"
      - "${HOME}/Syncthing/Data:/config/Default"

  tdarr:
    image: "ghcr.io/haveagitgat/tdarr:latest"
    container_name: "tdarr"
    hostname: "tautulli"
    restart: "unless-stopped"
    #network_mode: "bridge"
    ports:
      - "8265:8265" # webUI port
      - "8266:8266" # server port
      - "8267:8267" # Internal node port
      - "8268:8268" # Example extra node port
    environment:
      - "TZ=Europe/London"
      - "PUID=1000"
      - "PGID=1000"
      - "UMASK_SET=002"
      - "serverIP=0.0.0.0"
      - "serverPort=8266"
      - "webUIPort=8265"
      - "internalNode=true"
      - "nodeID=MyInternalNode"
    volumes:
      - "${HOME}/Tdarr/server:/app/server"
      - "${HOME}/Tdarr/configs:/app/configs"
      - "${HOME}/Tdarr/logs:/app/logs"
      - "${HOME}/Tdarr/transcode_cache:/temp"
      - "${HOME}/Media:/media"

  tdarr-node:
    container_name: "tdarr-node"
    image: "ghcr.io/haveagitgat/tdarr_node:latest"
    restart: "unless-stopped"
    #network_mode: "service:tdarr"
    environment:
      - "TZ=Europe/London"
      - "PUID=1000"
      - "PGID=1000"
      - "UMASK_SET=002"
      - "nodeID=MainNode"
      - "serverIP=0.0.0.0"
      - "serverPort=8266"
    volumes:
      - "${HOME}/Tdarr/configs:/app/configs"
      - "${HOME}/Tdarr/logs:/app/logs"
      - "${HOME}/Tdarr/transcode_cache:/temp"
      - "${HOME}/`Media:/media"

  technitium:
    container_name: "technitium"
    image: "technitium/dns-server:latest"
    restart: "unless-stopped"
    hostname: "technitium"
    # For DHCP deployments, use "host" network mode and remove all the port mappings, including the ports array by commenting them
    # network_mode: "host"
    ports:
      - "5380:5380/tcp" #DNS web console (HTTP)
      # - "53443:53443/tcp" #DNS web console (HTTPS)
      # - "53:53/udp" #DNS service
      # - "53:53/tcp" #DNS service
      # - "853:853/udp" #DNS-over-QUIC service
      # - "853:853/tcp" #DNS-over-TLS service
      # - "443:443/udp" #DNS-over-HTTPS service (HTTP/3)
      # - "443:443/tcp" #DNS-over-HTTPS service (HTTP/1.1, HTTP/2)
      # - "80:80/tcp" #DNS-over-HTTP service (use with reverse proxy or certbot certificate renewal)
      # - "8053:8053/tcp" #DNS-over-HTTP service (use with reverse proxy)
      # - "67:67/udp" #DHCP service
    environment:
      - DNS_SERVER_DOMAIN=technitium #The primary domain name used by this DNS Server to identify itself.
      # - DNS_SERVER_ADMIN_PASSWORD=password #DNS web console admin user password.
      # - DNS_SERVER_ADMIN_PASSWORD_FILE=password.txt #The path to a file that contains a plain text password for the DNS web console admin user.
      # - DNS_SERVER_PREFER_IPV6=false #DNS Server will use IPv6 for querying whenever possible with this option enabled.
      # - DNS_SERVER_WEB_SERVICE_HTTP_PORT=5380 #The TCP port number for the DNS web console over HTTP protocol.
      # - DNS_SERVER_WEB_SERVICE_HTTPS_PORT=53443 #The TCP port number for the DNS web console over HTTPS protocol.
      # - DNS_SERVER_WEB_SERVICE_ENABLE_HTTPS=false #Enables HTTPS for the DNS web console.
      # - DNS_SERVER_WEB_SERVICE_USE_SELF_SIGNED_CERT=false #Enables self signed TLS certificate for the DNS web console.
      # - DNS_SERVER_OPTIONAL_PROTOCOL_DNS_OVER_HTTP=false #Enables DNS server optional protocol DNS-over-HTTP on TCP port 8053 to be used with a TLS terminating reverse proxy like nginx.
      # - DNS_SERVER_RECURSION=AllowOnlyForPrivateNetworks #Recursion options: Allow, Deny, AllowOnlyForPrivateNetworks, UseSpecifiedNetworks.
      # - DNS_SERVER_RECURSION_DENIED_NETWORKS=1.1.1.0/24 #Comma separated list of IP addresses or network addresses to deny recursion. Valid only for `UseSpecifiedNetworks` recursion option.
      # - DNS_SERVER_RECURSION_ALLOWED_NETWORKS=127.0.0.1, 192.168.1.0/24 #Comma separated list of IP addresses or network addresses to allow recursion. Valid only for `UseSpecifiedNetworks` recursion option.
      # - DNS_SERVER_ENABLE_BLOCKING=false #Sets the DNS server to block domain names using Blocked Zone and Block List Zone.
      # - DNS_SERVER_ALLOW_TXT_BLOCKING_REPORT=false #Specifies if the DNS Server should respond with TXT records containing a blocked domain report for TXT type requests.
      # - DNS_SERVER_BLOCK_LIST_URLS= #A comma separated list of block list URLs.
      # - DNS_SERVER_FORWARDERS=1.1.1.1, 8.8.8.8 #Comma separated list of forwarder addresses.
      # - DNS_SERVER_FORWARDER_PROTOCOL=Tcp #Forwarder protocol options: Udp, Tcp, Tls, Https, HttpsJson.
      # - DNS_SERVER_LOG_USING_LOCAL_TIME=true #Enable this option to use local time instead of UTC for logging.
    volumes:
      - "${HOME}/Technitium:/etc/dns"
    sysctls:
      - "net.ipv4.ip_local_port_range=1024 65000"

  tubesync:
    image: "ghcr.io/meeb/tubesync:latest"
    hostname: "tubesync"
    container_name: "tubesync"
    ports:
      - "4848:4848"
    environment:
      - "PUID=1000"
      - "PGID=1000"
      - "TZ=Europe/London"
      - "HTTP_USER=$TUBE_SYNC_USER"
      - "HTTP_PASS=$TUBE_SYNC_PASS"
    volumes:
      - "${HOME}/TubeSync:/config"
      - "${HOME}/Media/YouTube:/downloads"
      - "/dev/dri:/dev/dri" # Quicksync
    restart: "unless-stopped"
    labels:
      - "traefik.enable=true"
      - "traefik.port=4848"
      - "traefik.http.routers.tubesync.entrypoints=websecure"
      - "traefik.http.routers.tubesync.rule=Host(`tubesync.jimeagle.com`)"
      - "com.centurylinklabs.watchtower.enable=true"

  unbound:
    container_name: unbound
    image: "mvance/unbound:latest"
    expose:
      - "53"
    networks:
      - dns
    network_mode: bridge
    ports:
      - target: 53
        published: 53
        protocol: tcp
        mode: host
      - target: 53
        published: 53
        protocol: udp
        mode: host
    volumes:
      - type: bind
        read_only: true
        source: ./my_conf/forward-records.conf
        target: /opt/unbound/etc/unbound/forward-records.conf
      - type: bind
        read_only: true
        source: ./my_conf/a-records.conf
        target: /opt/unbound/etc/unbound/a-records.conf
    restart: unless-stopped

  varken:
    image: "boerderij/varken:latest"
    hostname: "varken"
    container_name: "varken"
    restart: "unless-stopped"
    environment:
      - "TZ=Europe/London"
      - "VRKN_GLOBAL_SONARR_SERVER_IDS=1"
      - "VRKN_GLOBAL_RADARR_SERVER_IDS=1"
      - "VRKN_GLOBAL_OMBI_SERVER_IDS=false"
      - "VRKN_GLOBAL_MAXMIND_LICENSE_KEY"
      - "VRKN_INFLUXDB_URL=influx"
      - "VRKN_INFLUXDB_USERNAME"
      - "VRKN_INFLUXDB_PASSWORD"
      - "VRKN_TAUTULLI_1_URL=tautulli"
      - "VRKN_TAUTULLI_1_APIKEY"
      - "VRKN_SONARR_1_URL=sonarr"
      - "VRKN_SONARR_1_APIKEY"
      - "VRKN_RADARR_1_URL=radarr"
      - "VRKN_RADARR_1_APIKEY"
    volumes:
      - "${HOME}/Varken:/config"

  zinc:
    image: "public.ecr.aws/zinclabs/zinc:latest"
    hostname: "zinc"
    container_name: "zinc"
    restart: "unless-stopped"
    ports:
      - "4080:4080"
    volumes:
      - "${HOME}/Zinc:/data"
    environment:
      - "ZINC_DATA_PATH=/data"
      - "ZINC_FIRST_ADMIN_USER=admin"
      - "ZINC_FIRST_ADMIN_PASSWORD=${ZINC_ADMIN_PASSWORD}"
      - "ZINC_TELEMETRY=false"
